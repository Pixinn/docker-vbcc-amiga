#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Jun 12 16:05:15 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn make TARGET=m68k
match_max 100000
expect -exact "Are you building a cross-compiler?\r
Type y or n \[y\]: "
send -- "y\r"
expect -exact "y\r
Does your system/compiler support a type implemented as\r
standard 2-complement 8bit byte?\r
Type y or n \[y\]: "
send -- "y\r"
expect -exact "y\r
Enter that type\[signed char\]: "
send -- "signed char\r"
expect -exact "signed char\r
Does your system/compiler support a type implemented as\r
standard unsigned 8bit byte?\r
Type y or n \[y\]: "
send -- "y\r"
expect -exact "y\r
Enter that type\[unsigned char\]: "
send -- "unsigned char\r"
expect -exact "unsigned char\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based 2-complement 16bit word, big-endian?\r
Type y or n \[n\]: "
send -- "n\r"
expect -exact "n\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based 2-complement 16bit word, little-endian?\r
Type y or n \[y\]: "
send -- "y\r"
expect -exact "y\r
Enter that type\[signed short\]: "
send -- "signed short\r"
expect -exact "signed short\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based unsigned 16bit word, big-endian?\r
Type y or n \[n\]: "
send -- "n\r"
expect -exact "n\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based unsigned 16bit word, little-endian?\r
Type y or n \[y\]: "
send -- "y\r"
expect -exact "y\r
Enter that type\[unsigned short\]: "
send -- "unsigned short\r"
expect -exact "unsigned short\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based 2-complement 32bit word, big-endian?\r
Type y or n \[n\]: "
send -- "n\r"
expect -exact "n\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based 2-complement 32bit word, little-endian?\r
Type y or n \[y\]: "
send -- "y\r"
expect -exact "y\r
Enter that type\[signed int\]: "
send -- "signed int\r"
expect -exact "signed int\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based unsigned 32bit word, big-endian?\r
Type y or n \[n\]: "
send -- "n\r"
expect -exact "n\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based unsigned 32bit word, little-endian?\r
Type y or n \[y\]: "
send -- "y\r"
expect -exact "y\r
Enter that type\[unsigned int\]: "
send -- "unsigned int\r"
expect -exact "unsigned int\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based 2-complement 64bit word, big-endian?\r
Type y or n \[n\]: "
send -- "n\r"
expect -exact "n\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based 2-complement 64bit word, little-endian?\r
Type y or n \[y\]: "
send -- "y\r"
expect -exact "y\r
Enter that type\[signed long\]: "
send -- "signed long\r"
expect -exact "signed long\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based unsigned 64bit byte, big-endian?\r
Type y or n \[n\]: "
send -- "n\r"
expect -exact "n\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based unsigned 64bit byte, little-endian?\r
Type y or n \[y\]: "
send -- "y\r"
expect -exact "y\r
Enter that type\[unsigned long\]: "
send -- "unsigned long\r"
expect -exact "unsigned long\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based 32bit IEEE floating-point, big-endian?\r
Type y or n \[n\]: "
send -- "n\r"
expect -exact "n\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based 32bit IEEE floating-point, little-endian?\r
Type y or n \[y\]: "
send -- "y\r"
expect -exact "y\r
Enter that type\[float\]: "
send -- "float\r"
expect -exact "float\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based 64bit IEEE floating-point, big-endian?\r
Type y or n \[n\]: "
send -- "n\r"
expect -exact "n\r
Does your system/compiler support a type implemented as\r
standard 8bit-byte-based 64bit IEEE floating-point, little-endian?\r
Type y or n \[y\]: "
send -- "y\r"
expect -exact "y\r
Enter that type\[double\]: "
send -- "double\r"
expect eof
